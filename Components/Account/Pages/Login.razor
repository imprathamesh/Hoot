@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Hoot.Data
@using System.Security.Claims
@using Microsoft.IdentityModel.Tokens
@using System.IdentityModel.Tokens.Jwt
@using System.Text
@using Hoot.Helpers
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-lg-6">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="Input.Email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="Input.Password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [Inject]
    IConfiguration configuration { get; set; }

    string currentUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
        currentUrl = NavigationManager.Uri;

        if (HttpContext.User.Identity.IsAuthenticated && currentUrl.Contains("client_id"))
        {
            NavigationManager.NavigateTo(GetUri(currentUrl));
        }
        else if (HttpContext.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    // public async Task LoginUser()
    // {
    //     // This doesn't count login failures towards account lockout
    //     // To enable password failures to trigger account lockout, set lockoutOnFailure: true
    //     var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
    //     if (result.Succeeded)
    //     {
    //         var url = NavigationManager.Uri;
    //         Logger.LogInformation("User logged in.");

    //         if (url.Contains("client_id"))
    //         {
    //             //generate JWT Token


    //             RedirectManager.RedirectTo(url);
    //         }
    //         else
    //         {
    //             RedirectManager.RedirectTo(ReturnUrl);
    //         }
    //     }
    //     else if (result.RequiresTwoFactor)
    //     {
    //         RedirectManager.RedirectTo(
    //             "Account/LoginWith2fa",
    //             new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
    //     }
    //     else if (result.IsLockedOut)
    //     {
    //         Logger.LogWarning("User account locked out.");
    //         RedirectManager.RedirectTo("Account/Lockout");
    //     }
    //     else
    //     {
    //         errorMessage = "Error: Invalid login attempt.";
    //     }
    // }
    [Inject]
    IHttpContextAccessor HttpContextAccessor { get; set; }

    public async Task LoginUser()
    {
        // Try to sign in the user
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User {Email} logged in successfully.", Input.Email);

            // Fetch the user details
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user == null)
            {
                Logger.LogError("User {Email} not found.", Input.Email);
                RedirectManager.RedirectTo(nameof(AccessDenied));
            }

            // Generate authentication claims
            var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, user.UserName),
            new Claim(ClaimTypes.Email, user.Email),
             new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
            new Claim("sub", user.Id), // OpenID Connect requires 'sub' claim for user identification
            new Claim("role", "Admin") // Example role claim
        };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var authProperties = new AuthenticationProperties
                {
                    IsPersistent = Input.RememberMe
                };

            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity), authProperties);

            //Generate Token
            GenerateToken(claims);

            // Check if there is a return URL with OIDC parameters

            if (currentUrl.Contains("client_id"))
            {
                Logger.LogInformation("Redirecting to client app: {RedirectUrl}", currentUrl);

                NavigationManager.NavigateTo(GetUri(currentUrl));
            }

            RedirectManager.RedirectTo(ReturnUrl ?? "/");
        }
        else if (result.RequiresTwoFactor)
        {
            Logger.LogInformation("Redirecting user {Email} to 2FA login.", Input.Email);

            //RedirectManager.RedirectTo("LoginWith2fa", new { returnUrl = ReturnUrl, rememberMe = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User {Email} is locked out.", Input.Email);

            RedirectManager.RedirectTo("Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid login attempt for user {Email}.", Input.Email);
            //ModelState.AddModelError(string.Empty, "Invalid login attempt.");
        }
    }


    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    string GetUri(string url)
    {
        if (url.Contains("redirect_uri="))
        {
            int redirectUriIndex = url.IndexOf("redirect_uri=", StringComparison.OrdinalIgnoreCase);

            if (redirectUriIndex != -1)
            {
                // Move the index to the start of the redirect_uri value (after "redirect_uri=")
                redirectUriIndex += "redirect_uri=".Length;

                // Extract everything after "redirect_uri="
                string result = url.Substring(redirectUriIndex);

                // Decode the URL-encoded parts
                return result = System.Web.HttpUtility.UrlDecode(result);

            }
        }
        return null;
    }
    string GenerateToken(List<Claim> claims)
    {
        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("907A6D3546002CE8744DC03DC455A556"));
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256Signature);

        var header = new JwtHeader(creds);

        header["kid"] = "907A6D3546002CE8744DC03DC455A556"; // ✅ Explicitly set `kid`

        var token = new JwtSecurityToken(
            issuer: "https://localhost:7098",
            //audience: "https://localhost:7067",
            audience: "api1",
            claims: claims,
            expires: DateTime.UtcNow.AddMinutes(60),
            signingCredentials: creds
        );
        token.Header["kid"] = "907A6D3546002CE8744DC03DC455A556";

        var tokenString = new JwtSecurityTokenHandler().WriteToken(token);

        // Store the JWT in an HttpOnly Cookie
        var cookieOptions = new CookieOptions
            {
                HttpOnly = true,
                Secure = true,  // Set to true if using HTTPS
                SameSite = SameSiteMode.None  // Required for cross-origin authentication
            };

        HttpContextAccessor.HttpContext.Response.Cookies.Append("AuthToken", tokenString, cookieOptions);

        return "Token Generated";

    }
}
